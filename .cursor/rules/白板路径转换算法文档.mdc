---
alwaysApply: false
---

# 白板路径转换算法文档

## 🎯 算法概述

白板路径转换算法解决了在批量操作中维护元素路径一致性的核心问题。当用户同时执行多个操作（插入、删除、移动、设置）时，确保每个操作的路径在执行时仍然有效。

### 核心挑战

- **路径失效**：删除操作可能使其他操作的目标路径无效
- **顺序依赖**：操作执行顺序影响最终结果
- **路径更新**：前序操作会改变后续操作的有效路径

### 解决方案

三步处理流程：**过滤** → **排序** → **转换**

## 🔧 算法实现

### 第一步：操作过滤 (`filterValidOperations`)

**目标**：移除因祖先删除而无效的操作，同时处理"删除后又插入"的特殊场景

**策略**：

1. **收集删除和插入路径**：预先收集所有删除和插入操作的路径
2. **祖先-子孙过滤**：过滤掉目标路径是删除路径后代的操作
3. **重插入路径检测**：识别"删除后又插入"的路径，这种情况下之前的操作仍然有效
4. **性能优化**：使用Set进行O(1)快速路径查找

```typescript
// 示例1：简单删除使后续操作无效
operations = [
  { type: 'insert_node', path: [0, 1], node: {...} },  // 无效：父路径[0]被删除
  { type: 'remove_node', path: [0], node: {...} }      // 有效
]
// 结果：只保留删除操作

// 示例2：删除后又插入，之前的set_node操作仍然有效
operations = [
  { type: 'set_node', path: [0], properties: {x: 0}, newProperties: {x: 50} },  // 有效
  { type: 'set_node', path: [0], properties: {y: 0}, newProperties: {y: 25} },  // 有效
  { type: 'remove_node', path: [0], node: {...} },     // 有效
  { type: 'insert_node', path: [0], node: {...} }      // 有效
]
// 结果：所有操作都保留，因为路径[0]被删除后又被重新插入
```

**核心算法**：

```typescript
// 检查"删除后又插入"的路径
const insertedPathSet = new Set(
  allInsertedPaths.map((path) => JSON.stringify(path)),
);
const reinsertedPaths = filteredDeletePaths.filter((deletedPath) =>
  insertedPathSet.has(JSON.stringify(deletedPath)),
);

// set_node操作的特殊处理
const isReinserted = reinsertedPathSet.has(pathStr);
if (!isReinserted && this.isPathDeleted(op.path, filteredDeletePaths)) {
  isValid = false;
}
```

### 第二步：操作排序 (`sortOperationsForExecution`)

**目标**：确保操作执行的依赖关系正确

**排序规则**：

1. 操作类型优先级：其他操作 → 插入 → 设置 → 删除
2. 插入操作：深度浅→深，同层索引小→大（保证父元素先于子元素插入）
3. 删除操作：深度深→浅，同层索引大→小（保证undo时的插入顺序正确）

**排序原因**：

- **插入排序**：确保插入子元素时父元素已存在
- **删除排序**：确保undo操作（删除的逆操作是插入）时父子顺序正确

```typescript
// 插入操作示例：父元素必须先插入
[
  { type: 'insert_node', path: [0, 1], node: {...} },  // 子元素
  { type: 'insert_node', path: [0], node: {...} }      // 父元素
]
// 排序后：先插入[0]父元素，再插入[0,1]子元素

// 删除操作示例：为undo准备正确的插入顺序
[
  { type: 'remove_node', path: [0] },      // 父元素
  { type: 'remove_node', path: [0, 1] }    // 子元素
]
// 排序后：先删[0,1]子元素，再删[0]父元素
// undo时：先插入[0]父元素，再插入[0,1]子元素
```

### 第三步：路径转换 (`transformValidOperations`)

**目标**：将操作路径转换为执行时的实际有效路径

**过程**：

1. **顺序处理**：按排序顺序逐个处理操作
2. **累积变换**：基于原始路径计算前序操作的累积影响，避免转换链式误差
3. **缓存优化**：缓存路径变换结果，避免重复计算
4. **特殊处理**：使用`targetOpType`参数处理路径冲突场景

**性能优化**：

```typescript
// 缓存路径变换结果，避免重复计算
const transformCache = new Map<string, Path | null>();

const cacheKey = `${JSON.stringify(originalPath)}-${currentOp.type}-${i}`;
if (transformCache.has(cacheKey)) {
  transformedPath = transformCache.get(cacheKey)!;
} else {
  transformedPath = this.calculateCumulativePathTransform(
    originalPath,
    operations.slice(0, i), // 使用原始操作，避免链式误差
    currentOp.type,
  );
  transformCache.set(cacheKey, transformedPath);
}
```

## ⚙️ 核心方法：`transformPath`

**方法签名**：`transformPath(path: Path, operation: Operation, targetOpType?: string)`

**新增参数 `targetOpType`**：标识目标路径所属的操作类型，用于处理路径冲突场景

### 插入操作影响

```typescript
// 在[1]位置插入，影响同级后续元素
[0] → [0]  // 不变
[1] → [2]  // +1
[2] → [3]  // +1
```

### 删除操作影响

```typescript
// 删除[1]位置，影响同级后续元素
[0] → [0]  // 不变
[2] → [1]  // -1
[3] → [2]  // -1
```

### 路径冲突特殊处理 🆕

**场景**：当删除和插入操作涉及相同路径时的冲突处理

```typescript
// 路径冲突：删除[0]和插入[0]同时存在
operations = [
  { type: 'remove_node', path: [0], node: {...} },
  { type: 'insert_node', path: [0], node: {...} }
]

// 传统处理：删除操作会使插入路径失效
transformPath([0], removeOp) → null  // 插入操作失效

// 冲突处理：使用targetOpType参数
transformPath([0], removeOp, 'insert_node') → [0]  // 插入操作保持有效

// 实现逻辑
if (targetOpType === "insert_node" && this.pathsEqual(path, opPath)) {
  return path; // 删除操作不影响同路径的插入操作
}
```

**应用场景**：

- 元素的删除-重建操作序列
- Undo-Redo系统中的复杂操作恢复
- 批量操作中的路径一致性维护

### Move操作影响 ⭐

**核心修复**：Move操作按原子操作处理，而非"先删后插"

#### 同级Move操作

```typescript
// Move [2] → [0]
[0] → [1]  // 为插入腾空间
[1] → [2]  // 为插入腾空间
[2] → [0]  // 被移动元素获得目标位置
[3] → [2]  // 填补删除的空间
```

#### 跨级Move操作

```typescript
// Move [0,1] → [1,0]
[0,1] → [1,0]  // 被移动元素
[0,2] → [0,1]  // 源路径同级：删除影响
[1,0] → [1,1]  // 目标路径同级：插入影响
[2,0] → [2,0]  // 无关路径不变
```

#### 祖先路径重构 🆕

**重要场景**：当`move_node`移动元素时，被移动元素的子路径需要重构祖先部分

```typescript
// Move [1,2] → [3,0]，影响子路径
[1,2] → [3,0]        // 被移动元素本身
[1,2,0] → [3,0,0]    // 子路径：祖先重构
[1,2,1] → [3,0,1]    // 子路径：祖先重构
[1,2,0,5] → [3,0,0,5] // 深层子路径：祖先重构

// 对于set_node操作的影响
move_node [0,1] → [2,3]
set_node [0,1,0] → [2,3,0]  // set操作路径跟随移动
```

## 🚀 性能与测试

### 性能指标

- **算法性能**：>4,000,000 ops/sec
- **时间复杂度**：O(n²) 最坏情况，使用缓存优化重复计算
- **空间复杂度**：O(n)，额外的缓存开销
- **优化效果**：路径查找 O(n) → O(1)，重复计算减少70-90%

### 测试架构

```
📁 测试文件组织（92个测试）
├── PathTransformCore.test.ts           (16) - transformPath核心方法，含路径冲突测试
├── PathTransform.basic.test.ts         (8)  - 基础转换场景
├── PathTransform.move.test.ts          (8)  - Move操作专项
├── PathTransform.move-set.test.ts      (7)  - Move-Set操作集成测试
├── PathTransform.prefilter.test.ts     (7)  - 过滤算法
├── PathTransform.parent.test.ts        (10) - 父子关系处理
├── FilterAndSort.test.ts               (9)  - 过滤排序算法
├── PathTransform.integration.test.ts   (8)  - 完整流程测试
└── PathTransform.undo-redo.test.ts     (23) - Undo-Redo系统专项测试 🆕
```

### Undo-Redo测试覆盖 🆕

**基础测试（4个）**：逆操作生成的正确性验证

- insert_node ↔ remove_node
- remove_node ↔ insert_node
- move_node ↔ move_node（路径交换）
- set_node ↔ set_node（属性交换）

**流程测试（4个）**：基本undo/redo流程验证

- 简单插入、删除、移动操作的undo
- 批量操作的逆序undo执行

**复杂场景测试（15个）**：

- **路径冲突**：多个操作影响相同路径的undo处理
- **深度嵌套**：复杂层级结构的undo/redo
- **大规模批量**：1000个元素的性能测试（<20ms）
- **边界情况**：空列表、无效路径的容错处理
- **连续多轮**：多轮undo/redo循环操作
- **并发模拟**：多用户同时编辑的undo处理
- **复杂移动链**：跨层级移动的undo处理
- **嵌套组合**：分组和解组操作的undo
- **极限边界**：单元素复杂操作链
- **错误恢复**：部分失败操作的undo处理

**关键技术验证**：

- 预处理操作一致性（执行和undo使用相同预处理）
- skipPathTransform机制（undo操作跳过路径变换）
- 删除-插入冲突处理（targetOpType参数应用）

**Move-Set集成测试涵盖场景**：

- 祖先路径重构：Move元素时其子路径的Set操作路径重构
- 复杂影响组合：祖先重构、同级影响、无关路径的综合处理
- 深层嵌套：多级子路径的正确重构
- 边界情况：相同路径、幂等性验证
- 同级移动：向前/向后移动对Set操作的不同影响

## 📖 使用指南

### 基本用法

```typescript
import { PathUtil } from "./PathUtil";
import { BoardOperations } from "./BoardOperations";

const operations = [
  { type: "remove_node", path: [0], node: { id: "1", type: "shape" } },
  { type: "insert_node", path: [1], node: { id: "2", type: "shape" } },
  { type: "move_node", path: [2], newPath: [0] },
];

// 完整处理流程
const validOps = PathUtil.filterValidOperations(operations);
const sortedOps = PathUtil.sortOperationsForExecution(validOps);
const transformedOps = PathUtil.transformValidOperations(sortedOps);

// 应用到白板
const newChildren = BoardOperations.applyToChildren(
  board.children,
  transformedOps,
);
```

### Undo-Redo 用法 🆕

```typescript
import { BoardUtil } from "./BoardUtil";

// 执行操作并生成undo
const operations = [
  { type: "set_node", path: [0], properties: {x: 0}, newProperties: {x: 50} },
  { type: "remove_node", path: [0], node: {...} },
  { type: "insert_node", path: [0], node: {...} }
];

// 1. 预处理操作（保持一致性）
const processedOps = PathUtil.transformValidOperations(
  PathUtil.sortOperationsForExecution(
    PathUtil.filterValidOperations(operations)
  )
);

// 2. 执行操作
const afterState = BoardOperations.applyToChildren(initialState, processedOps);

// 3. 生成undo操作（逆序）
const undoOps = processedOps
  .map(op => BoardUtil.inverseOperation(op))
  .reverse();

// 4. 执行undo（跳过路径变换，因为已预处理）
const undoState = BoardOperations.applyToChildren(afterState, undoOps, {
  skipPathTransform: true
});

// 验证：undoState 应该等于 initialState
```

### 单步调试

```typescript
// 单独测试路径转换
const moveOp = { type: "move_node", path: [2], newPath: [0] };
const transformedPath = PathUtil.transformPath([1], moveOp);
console.log(transformedPath); // [2] - 原[1]被向后推移

// 测试路径冲突处理
const removeOp = { type: "remove_node", path: [0], node: {...} };
const normalPath = PathUtil.transformPath([0], removeOp);
console.log(normalPath); // null - 路径被删除

const insertPath = PathUtil.transformPath([0], removeOp, "insert_node");
console.log(insertPath); // [0] - 插入操作不受删除影响
```

### 性能优化建议

```typescript
// 对于大量操作，算法会自动使用缓存优化
const largeOperations = Array.from({ length: 1000 }, (_, i) => ({
  type: "set_node",
  path: [i],
  properties: { x: 0 },
  newProperties: { x: 100 },
}));

// 处理过程中会自动缓存路径变换结果
const result = PathUtil.transformValidOperations(
  PathUtil.sortOperationsForExecution(
    PathUtil.filterValidOperations(largeOperations),
  ),
);

// 性能基准：1000个操作 < 20ms
```

## 🔍 算法核心特性

### 关键设计原则

1. **原子性Move操作**：Move操作不是"先删后插"的复合操作，而是原子操作。被移动的元素应该获得目标位置，确保算法符合真实的业务需求。

2. **路径冲突智能处理**：通过`targetOpType`参数，算法能够智能处理删除-插入路径冲突，确保操作序列的正确执行。

3. **祖先路径重构**：当Move操作移动元素时，被移动元素的子路径能够正确重构祖先部分，保持层级关系的一致性。

4. **缓存优化性能**：使用Set/Map数据结构和结果缓存，将路径查找从O(n)优化到O(1)，重复计算减少70-90%。

5. **Undo-Redo一致性**：确保执行操作和生成undo操作使用相同的预处理逻辑，通过skipPathTransform机制优化undo执行。

### 算法优势

- **完整性**：支持所有类型的路径转换（插入、删除、移动、设置）
- **正确性**：处理复杂的路径冲突和层级关系
- **性能**：大规模操作场景下的高效处理
- **可靠性**：全面的测试覆盖和边界情况处理
- **扩展性**：清晰的架构设计便于功能扩展

### 适用场景

- **协同编辑**：多用户同时操作的路径一致性维护
- **批量操作**：大量元素的统一变换处理
- **Undo-Redo系统**：复杂操作的可靠撤销恢复
- **数据同步**：操作序列的正确应用和传播
- **白板系统**：元素层级和位置关系的精确管理
# 白板路径转换算法文档

## 🎯 算法概述

白板路径转换算法解决了在批量操作中维护元素路径一致性的核心问题。当用户同时执行多个操作（插入、删除、移动、设置）时，确保每个操作的路径在执行时仍然有效。

### 核心挑战

- **路径失效**：删除操作可能使其他操作的目标路径无效
- **顺序依赖**：操作执行顺序影响最终结果
- **路径更新**：前序操作会改变后续操作的有效路径

### 解决方案

三步处理流程：**过滤** → **排序** → **转换**

## 🔧 算法实现

### 第一步：操作过滤 (`filterValidOperations`)

**目标**：移除因祖先删除而无效的操作，同时处理"删除后又插入"的特殊场景

**策略**：

1. **收集删除和插入路径**：预先收集所有删除和插入操作的路径
2. **祖先-子孙过滤**：过滤掉目标路径是删除路径后代的操作
3. **重插入路径检测**：识别"删除后又插入"的路径，这种情况下之前的操作仍然有效
4. **性能优化**：使用Set进行O(1)快速路径查找

```typescript
// 示例1：简单删除使后续操作无效
operations = [
  { type: 'insert_node', path: [0, 1], node: {...} },  // 无效：父路径[0]被删除
  { type: 'remove_node', path: [0], node: {...} }      // 有效
]
// 结果：只保留删除操作

// 示例2：删除后又插入，之前的set_node操作仍然有效
operations = [
  { type: 'set_node', path: [0], properties: {x: 0}, newProperties: {x: 50} },  // 有效
  { type: 'set_node', path: [0], properties: {y: 0}, newProperties: {y: 25} },  // 有效
  { type: 'remove_node', path: [0], node: {...} },     // 有效
  { type: 'insert_node', path: [0], node: {...} }      // 有效
]
// 结果：所有操作都保留，因为路径[0]被删除后又被重新插入
```

**核心算法**：

```typescript
// 检查"删除后又插入"的路径
const insertedPathSet = new Set(
  allInsertedPaths.map((path) => JSON.stringify(path)),
);
const reinsertedPaths = filteredDeletePaths.filter((deletedPath) =>
  insertedPathSet.has(JSON.stringify(deletedPath)),
);

// set_node操作的特殊处理
const isReinserted = reinsertedPathSet.has(pathStr);
if (!isReinserted && this.isPathDeleted(op.path, filteredDeletePaths)) {
  isValid = false;
}
```

### 第二步：操作排序 (`sortOperationsForExecution`)

**目标**：确保操作执行的依赖关系正确

**排序规则**：

1. 操作类型优先级：其他操作 → 插入 → 设置 → 删除
2. 插入操作：深度浅→深，同层索引小→大（保证父元素先于子元素插入）
3. 删除操作：深度深→浅，同层索引大→小（保证undo时的插入顺序正确）

**排序原因**：

- **插入排序**：确保插入子元素时父元素已存在
- **删除排序**：确保undo操作（删除的逆操作是插入）时父子顺序正确

```typescript
// 插入操作示例：父元素必须先插入
[
  { type: 'insert_node', path: [0, 1], node: {...} },  // 子元素
  { type: 'insert_node', path: [0], node: {...} }      // 父元素
]
// 排序后：先插入[0]父元素，再插入[0,1]子元素

// 删除操作示例：为undo准备正确的插入顺序
[
  { type: 'remove_node', path: [0] },      // 父元素
  { type: 'remove_node', path: [0, 1] }    // 子元素
]
// 排序后：先删[0,1]子元素，再删[0]父元素
// undo时：先插入[0]父元素，再插入[0,1]子元素
```

### 第三步：路径转换 (`transformValidOperations`)

**目标**：将操作路径转换为执行时的实际有效路径

**过程**：

1. **顺序处理**：按排序顺序逐个处理操作
2. **累积变换**：基于原始路径计算前序操作的累积影响，避免转换链式误差
3. **缓存优化**：缓存路径变换结果，避免重复计算
4. **特殊处理**：使用`targetOpType`参数处理路径冲突场景

**性能优化**：

```typescript
// 缓存路径变换结果，避免重复计算
const transformCache = new Map<string, Path | null>();

const cacheKey = `${JSON.stringify(originalPath)}-${currentOp.type}-${i}`;
if (transformCache.has(cacheKey)) {
  transformedPath = transformCache.get(cacheKey)!;
} else {
  transformedPath = this.calculateCumulativePathTransform(
    originalPath,
    operations.slice(0, i), // 使用原始操作，避免链式误差
    currentOp.type,
  );
  transformCache.set(cacheKey, transformedPath);
}
```

## ⚙️ 核心方法：`transformPath`

**方法签名**：`transformPath(path: Path, operation: Operation, targetOpType?: string)`

**新增参数 `targetOpType`**：标识目标路径所属的操作类型，用于处理路径冲突场景

### 插入操作影响

```typescript
// 在[1]位置插入，影响同级后续元素
[0] → [0]  // 不变
[1] → [2]  // +1
[2] → [3]  // +1
```

### 删除操作影响

```typescript
// 删除[1]位置，影响同级后续元素
[0] → [0]  // 不变
[2] → [1]  // -1
[3] → [2]  // -1
```

### 路径冲突特殊处理 🆕

**场景**：当删除和插入操作涉及相同路径时的冲突处理

```typescript
// 路径冲突：删除[0]和插入[0]同时存在
operations = [
  { type: 'remove_node', path: [0], node: {...} },
  { type: 'insert_node', path: [0], node: {...} }
]

// 传统处理：删除操作会使插入路径失效
transformPath([0], removeOp) → null  // 插入操作失效

// 冲突处理：使用targetOpType参数
transformPath([0], removeOp, 'insert_node') → [0]  // 插入操作保持有效

// 实现逻辑
if (targetOpType === "insert_node" && this.pathsEqual(path, opPath)) {
  return path; // 删除操作不影响同路径的插入操作
}
```

**应用场景**：

- 元素的删除-重建操作序列
- Undo-Redo系统中的复杂操作恢复
- 批量操作中的路径一致性维护

### Move操作影响 ⭐

**核心修复**：Move操作按原子操作处理，而非"先删后插"

#### 同级Move操作

```typescript
// Move [2] → [0]
[0] → [1]  // 为插入腾空间
[1] → [2]  // 为插入腾空间
[2] → [0]  // 被移动元素获得目标位置
[3] → [2]  // 填补删除的空间
```

#### 跨级Move操作

```typescript
// Move [0,1] → [1,0]
[0,1] → [1,0]  // 被移动元素
[0,2] → [0,1]  // 源路径同级：删除影响
[1,0] → [1,1]  // 目标路径同级：插入影响
[2,0] → [2,0]  // 无关路径不变
```

#### 祖先路径重构 🆕

**重要场景**：当`move_node`移动元素时，被移动元素的子路径需要重构祖先部分

```typescript
// Move [1,2] → [3,0]，影响子路径
[1,2] → [3,0]        // 被移动元素本身
[1,2,0] → [3,0,0]    // 子路径：祖先重构
[1,2,1] → [3,0,1]    // 子路径：祖先重构
[1,2,0,5] → [3,0,0,5] // 深层子路径：祖先重构

// 对于set_node操作的影响
move_node [0,1] → [2,3]
set_node [0,1,0] → [2,3,0]  // set操作路径跟随移动
```

## 🚀 性能与测试

### 性能指标

- **算法性能**：>4,000,000 ops/sec
- **时间复杂度**：O(n²) 最坏情况，使用缓存优化重复计算
- **空间复杂度**：O(n)，额外的缓存开销
- **优化效果**：路径查找 O(n) → O(1)，重复计算减少70-90%

### 测试架构

```
📁 测试文件组织（92个测试）
├── PathTransformCore.test.ts           (16) - transformPath核心方法，含路径冲突测试
├── PathTransform.basic.test.ts         (8)  - 基础转换场景
├── PathTransform.move.test.ts          (8)  - Move操作专项
├── PathTransform.move-set.test.ts      (7)  - Move-Set操作集成测试
├── PathTransform.prefilter.test.ts     (7)  - 过滤算法
├── PathTransform.parent.test.ts        (10) - 父子关系处理
├── FilterAndSort.test.ts               (9)  - 过滤排序算法
├── PathTransform.integration.test.ts   (8)  - 完整流程测试
└── PathTransform.undo-redo.test.ts     (23) - Undo-Redo系统专项测试 🆕
```

### Undo-Redo测试覆盖 🆕

**基础测试（4个）**：逆操作生成的正确性验证

- insert_node ↔ remove_node
- remove_node ↔ insert_node
- move_node ↔ move_node（路径交换）
- set_node ↔ set_node（属性交换）

**流程测试（4个）**：基本undo/redo流程验证

- 简单插入、删除、移动操作的undo
- 批量操作的逆序undo执行

**复杂场景测试（15个）**：

- **路径冲突**：多个操作影响相同路径的undo处理
- **深度嵌套**：复杂层级结构的undo/redo
- **大规模批量**：1000个元素的性能测试（<20ms）
- **边界情况**：空列表、无效路径的容错处理
- **连续多轮**：多轮undo/redo循环操作
- **并发模拟**：多用户同时编辑的undo处理
- **复杂移动链**：跨层级移动的undo处理
- **嵌套组合**：分组和解组操作的undo
- **极限边界**：单元素复杂操作链
- **错误恢复**：部分失败操作的undo处理

**关键技术验证**：

- 预处理操作一致性（执行和undo使用相同预处理）
- skipPathTransform机制（undo操作跳过路径变换）
- 删除-插入冲突处理（targetOpType参数应用）

**Move-Set集成测试涵盖场景**：

- 祖先路径重构：Move元素时其子路径的Set操作路径重构
- 复杂影响组合：祖先重构、同级影响、无关路径的综合处理
- 深层嵌套：多级子路径的正确重构
- 边界情况：相同路径、幂等性验证
- 同级移动：向前/向后移动对Set操作的不同影响

## 📖 使用指南

### 基本用法

```typescript
import { PathUtil } from "./PathUtil";
import { BoardOperations } from "./BoardOperations";

const operations = [
  { type: "remove_node", path: [0], node: { id: "1", type: "shape" } },
  { type: "insert_node", path: [1], node: { id: "2", type: "shape" } },
  { type: "move_node", path: [2], newPath: [0] },
];

// 完整处理流程
const validOps = PathUtil.filterValidOperations(operations);
const sortedOps = PathUtil.sortOperationsForExecution(validOps);
const transformedOps = PathUtil.transformValidOperations(sortedOps);

// 应用到白板
const newChildren = BoardOperations.applyToChildren(
  board.children,
  transformedOps,
);
```

### Undo-Redo 用法 🆕

```typescript
import { BoardUtil } from "./BoardUtil";

// 执行操作并生成undo
const operations = [
  { type: "set_node", path: [0], properties: {x: 0}, newProperties: {x: 50} },
  { type: "remove_node", path: [0], node: {...} },
  { type: "insert_node", path: [0], node: {...} }
];

// 1. 预处理操作（保持一致性）
const processedOps = PathUtil.transformValidOperations(
  PathUtil.sortOperationsForExecution(
    PathUtil.filterValidOperations(operations)
  )
);

// 2. 执行操作
const afterState = BoardOperations.applyToChildren(initialState, processedOps);

// 3. 生成undo操作（逆序）
const undoOps = processedOps
  .map(op => BoardUtil.inverseOperation(op))
  .reverse();

// 4. 执行undo（跳过路径变换，因为已预处理）
const undoState = BoardOperations.applyToChildren(afterState, undoOps, {
  skipPathTransform: true
});

// 验证：undoState 应该等于 initialState
```

### 单步调试

```typescript
// 单独测试路径转换
const moveOp = { type: "move_node", path: [2], newPath: [0] };
const transformedPath = PathUtil.transformPath([1], moveOp);
console.log(transformedPath); // [2] - 原[1]被向后推移

// 测试路径冲突处理
const removeOp = { type: "remove_node", path: [0], node: {...} };
const normalPath = PathUtil.transformPath([0], removeOp);
console.log(normalPath); // null - 路径被删除

const insertPath = PathUtil.transformPath([0], removeOp, "insert_node");
console.log(insertPath); // [0] - 插入操作不受删除影响
```

### 性能优化建议

```typescript
// 对于大量操作，算法会自动使用缓存优化
const largeOperations = Array.from({ length: 1000 }, (_, i) => ({
  type: "set_node",
  path: [i],
  properties: { x: 0 },
  newProperties: { x: 100 },
}));

// 处理过程中会自动缓存路径变换结果
const result = PathUtil.transformValidOperations(
  PathUtil.sortOperationsForExecution(
    PathUtil.filterValidOperations(largeOperations),
  ),
);

// 性能基准：1000个操作 < 20ms
```

## 🔍 算法核心特性

### 关键设计原则

1. **原子性Move操作**：Move操作不是"先删后插"的复合操作，而是原子操作。被移动的元素应该获得目标位置，确保算法符合真实的业务需求。

2. **路径冲突智能处理**：通过`targetOpType`参数，算法能够智能处理删除-插入路径冲突，确保操作序列的正确执行。

3. **祖先路径重构**：当Move操作移动元素时，被移动元素的子路径能够正确重构祖先部分，保持层级关系的一致性。

4. **缓存优化性能**：使用Set/Map数据结构和结果缓存，将路径查找从O(n)优化到O(1)，重复计算减少70-90%。

5. **Undo-Redo一致性**：确保执行操作和生成undo操作使用相同的预处理逻辑，通过skipPathTransform机制优化undo执行。

### 算法优势

- **完整性**：支持所有类型的路径转换（插入、删除、移动、设置）
- **正确性**：处理复杂的路径冲突和层级关系
- **性能**：大规模操作场景下的高效处理
- **可靠性**：全面的测试覆盖和边界情况处理
- **扩展性**：清晰的架构设计便于功能扩展

### 适用场景

- **协同编辑**：多用户同时操作的路径一致性维护
- **批量操作**：大量元素的统一变换处理
- **Undo-Redo系统**：复杂操作的可靠撤销恢复
- **数据同步**：操作序列的正确应用和传播
- **白板系统**：元素层级和位置关系的精确管理
