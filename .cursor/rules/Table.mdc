---
alwaysApply: false
---

# Table 组件技术文档

## 概述

Table 组件是一个基于 React 的高性能、插件化表格组件，支持丰富的单元格类型、拖拽排序、键盘导航、主题切换等功能。该组件采用插件架构设计，具有良好的扩展性和可维护性。

## 目录结构

```
Table/
├── components/                    # 核心组件
│   ├── Cell.tsx                  # 单元格组件
│   ├── ColumnEditModal.tsx       # 列编辑模态框
│   ├── ColumnHeader.tsx          # 列头组件
│   ├── Row.tsx                   # 行组件
│   ├── SelectEditor.tsx          # 选择编辑器
│   ├── SelectList.tsx            # 选择列表组件
│   ├── Table.tsx                 # 主表格组件
│   ├── TableContent.tsx          # 表格内容组件
│   └── VerticalSelectList.tsx    # 垂直选择列表
├── plugins/                      # 插件系统
│   ├── AttachmentPlugin/         # 附件插件
│   ├── CheckboxPlugin/           # 复选框插件
│   ├── DatePlugin/               # 日期插件
│   ├── ImagePlugin/              # 图片插件
│   ├── LinkPlugin/               # 链接插件
│   ├── MultiSelectPlugin/        # 多选插件
│   ├── NumberPlugin/             # 数字插件
│   ├── ProgressPlugin/           # 进度插件
│   ├── RichTextPlugin/           # 富文本插件
│   ├── SelectPlugin/             # 单选插件
│   ├── StarPlugin/               # 评分插件
│   ├── TextPlugin/               # 文本插件
│   └── index.ts                  # 插件统一导出
├── hooks/                        # 自定义 Hooks
│   ├── useCellEditor.ts          # 单元格编辑器 Hook
│   ├── useColumnResize.ts        # 列宽调整 Hook
│   ├── useColumnVisibility.ts    # 列显示隐藏 Hook
│   ├── useKeyboardNavigation.ts  # 键盘导航 Hook
│   ├── useTableStore.ts          # 表格状态 Hook
│   ├── useValidation.ts          # 数据验证 Hook
│   └── index.ts                  # Hooks 统一导出
├── constants/                    # 常量定义
│   ├── select.ts                 # 选择相关常量
│   └── index.ts                  # 常量统一导出
├── PluginManager.ts              # 插件管理器
├── TableContext.tsx              # React Context
├── TableStore.ts                 # Zustand 状态管理
├── types.ts                      # TypeScript 类型定义
└── index.ts                      # 组件统一导出
```

## 架构设计

### 1. 插件架构

Table 组件采用插件架构，每个单元格类型都是一个独立的插件，通过 `PluginManager` 进行管理。

#### 插件接口

```typescript
interface CellPlugin<T> {
  type: string; // 插件类型标识
  name: string; // 插件显示名称
  Icon?: React.ComponentType; // 列头图标组件
  Renderer: React.ComponentType; // 单元格渲染组件
  Editor?: React.ComponentType; // 单元格编辑组件
  editable?: boolean; // 是否可编辑
  onMount?: () => void; // 插件挂载钩子
  onUnmount?: () => void; // 插件卸载钩子
  beforeSave?: (value, config) => any; // 保存前数据转换
  afterLoad?: (value, config) => any; // 加载后数据转换
  onColumnCleanup?: (columnData) => Promise<void>; // 列删除时清理
}
```

#### 插件管理器

```typescript
class PluginManager {
  registerPlugin(plugin: CellPlugin): void; // 注册单个插件
  registerPlugins(plugins: CellPlugin[]): void; // 批量注册插件
  getPlugin(type: string): CellPlugin; // 获取插件
  loadAllPlugins(): void; // 加载所有插件
  transformBeforeSave(type, value, config): any; // 保存前转换
  transformAfterLoad(type, value, config): any; // 加载后转换
  executeColumnCleanup(type, columnData): void; // 执行列清理
}
```

### 2. 状态管理

使用 Zustand 进行状态管理，支持历史记录和撤销重做功能。

#### 主要状态

```typescript
interface TableState {
  // 数据状态
  columns: ColumnDef[]; // 列定义
  rows: RowData[]; // 行数据
  columnOrder: string[]; // 列顺序
  columnWidths: Record<string, number>; // 列宽度

  // 交互状态
  selectedCell: CellCoord | null; // 选中单元格
  editingCell: CellCoord | null; // 编辑中单元格

  // 历史记录
  history: TableSnapshot[]; // 历史快照
  historyIndex: number; // 历史索引

  // 操作方法
  updateCellValue: (rowId, columnId, value) => void;
  moveColumn: (fromIndex, toIndex) => void;
  moveRow: (fromIndex, toIndex) => void;
  addRow: (row?) => void;
  deleteRow: (rowId) => void;
  addColumn: (column) => void;
  deleteColumn: (columnId) => void;
  // ... 更多方法
}
```

### 3. 核心组件

#### Table (主组件)

- 初始化插件管理器
- 创建状态存储
- 提供 Context
- 处理主题和键盘导航

#### TableContent (表格内容)

- 渲染表格结构
- 处理虚拟化滚动
- 管理列头和行
- 处理拖拽排序

#### Cell (单元格)

- 渲染单元格内容
- 处理编辑模式切换
- 管理选中状态
- 集成插件渲染器

#### Row (行组件)

- 渲染行内容
- 支持行拖拽
- 处理行操作

#### ColumnHeader (列头)

- 渲染列头
- 支持列拖拽
- 处理列宽调整
- 显示插件图标

## 核心功能

### 1. 虚拟化渲染

使用 `@tanstack/react-virtual` 实现行虚拟化，支持大量数据渲染。

### 2. 拖拽排序

基于 `react-dnd` 实现：

- 列拖拽排序
- 行拖拽排序
- 拖拽预览效果

### 3. 键盘导航

支持方向键导航和快捷键操作：

- 方向键移动选择
- Enter/Space 进入编辑
- Escape 退出编辑

### 4. 主题支持

支持 light/dark 主题切换，所有组件和插件都支持主题。

### 5. 历史记录

支持撤销重做功能，自动保存历史快照。

## 代码规范

### 1. 组件规范

#### 使用 memo 优化性能

```typescript
const Component = memo(({ props }) => {
  // 组件逻辑
});
```

#### 使用 useMemoizedFn 处理函数

```typescript
const handleClick = useMemoizedFn(() => {
  // 处理逻辑
});
```

#### 使用 classNames 处理样式

```typescript
const className = classNames("base-class", {
  "conditional-class": condition,
  "theme-dark": isDark,
});
```

### 2. TypeScript 规范

#### 严格类型定义

- 不使用 `any` 类型
- 定义完整的接口
- 使用泛型约束

#### 类型导出

```typescript
export type { TableProps, ColumnDef, CellValue, CellPlugin };
```

### 3. 文件组织规范

#### 组件文件结构

```
PluginName/
├── components/
│   ├── Renderer.tsx      # 渲染组件
│   ├── Editor.tsx        # 编辑组件
│   └── index.ts          # 组件导出
├── types.ts              # 类型定义
└── index.tsx             # 插件主文件
```

#### 导出规范

```typescript
// 插件内部组件导出
export { default as Renderer } from "./Renderer";
export { default as Editor } from "./Editor";

// 主文件导出
export default PluginName;
```

## 插件编写规范

### 1. 基础插件模板

```typescript
import { CellPlugin } from "../../types";
import Renderer from "./components/Renderer";
import Editor from "./components/Editor";
import { PluginIcon } from "react-icons/md";

const PluginName: CellPlugin<ConfigType> = {
  type: "plugin-type",
  name: "插件名称",
  editable: true,
  Renderer,
  Editor,
  Icon: ({ className }) => <PluginIcon className={className} />,

  beforeSave: (value, config) => {
    // 保存前数据处理
    return processedValue;
  },

  afterLoad: (value, config) => {
    // 加载后数据处理
    return processedValue;
  },

  onColumnCleanup: async (columnData) => {
    // 列删除时清理资源
    await cleanupResources(columnData);
  },
};

export default PluginName;
```

### 2. 渲染器规范

```typescript
interface RendererProps {
  value: CellValue;
  column: ColumnDef;
  theme: "light" | "dark";
  readonly: boolean;
  onCellValueChange: (newValue: CellValue) => void;
}

const Renderer: React.FC<RendererProps> = memo(({
  value,
  column,
  theme,
  readonly,
  onCellValueChange,
}) => {
  const isDark = theme === "dark";

  // 渲染逻辑
  return (
    <div className="w-full h-full flex items-center px-2">
      {/* 内容 */}
    </div>
  );
});
```

### 3. 编辑器规范

```typescript
interface EditorProps {
  value: CellValue;
  column: ColumnDef;
  onCellValueChange: (newValue: CellValue) => void;
  onFinishEdit: () => void;
  onColumnChange: (column: ColumnDef) => void;
  theme: "light" | "dark";
  readonly: boolean;
}

const Editor: React.FC<EditorProps> = memo(({
  value,
  onCellValueChange,
  onFinishEdit,
  theme,
  readonly,
}) => {
  // 编辑逻辑

  return (
    <div className="w-full h-full">
      {/* 编辑组件 */}
    </div>
  );
});
```

### 4. 插件开发要点

#### 主题支持

- 所有插件必须支持 light/dark 主题
- 使用条件样式处理主题差异

#### 性能优化

- 使用 memo 包装组件
- 使用 useMemoizedFn 处理事件
- 避免不必要的渲染

#### 数据处理

- 实现 beforeSave 和 afterLoad 进行数据转换
- 处理边界情况和错误数据
- 实现数据验证

#### 资源清理

- 实现 onColumnCleanup 清理资源
- 处理异步清理操作
- 确保无内存泄漏

### 5. 内置插件参考

#### 简单插件示例 (TextPlugin)

```typescript
const TextPlugin: CellPlugin<any> = {
  type: "text",
  name: "文本",
  editable: true,
  Renderer,
  Editor,
  Icon: ({ className }) => <MdTextFields className={className} />,
  beforeSave: (value) => value,
  afterLoad: (value) => value,
};
```

#### 复杂插件示例 (RichTextPlugin)

```typescript
const RichTextPlugin: CellPlugin<RichTextPluginConfig> = {
  type: "rich-text",
  name: "富文本",
  editable: false,  // 通过渲染器直接操作
  Renderer,
  Icon: ({ className }) => <MdDescription className={className} />,

  beforeSave: (value) => {
    return Array.isArray(value)
      ? value.filter(item => item && item.contentId)
      : [];
  },

  afterLoad: (value) => {
    return Array.isArray(value)
      ? value.filter(item => item && item.contentId)
      : [];
  },

  onColumnCleanup: async (columnData) => {
    // 清理关联的内容记录
    const contentIds = extractContentIds(columnData);
    await Promise.allSettled(
      contentIds.map(id => deleteContent(id))
    );
  },
};
```

## 使用示例

### 1. 基础使用

```tsx
import Table from "@/components/Table";

const MyTable = () => {
  const columns = [
    { id: "name", title: "姓名", type: "text", width: 200 },
    { id: "age", title: "年龄", type: "number", width: 100 },
    { id: "email", title: "邮箱", type: "text", width: 250 },
  ];

  const data = [
    { id: "1", name: "张三", age: 25, email: "zhang@example.com" },
    { id: "2", name: "李四", age: 30, email: "li@example.com" },
  ];

  const columnOrder = ["name", "age", "email"];

  return (
    <Table
      columns={columns}
      data={data}
      columnOrder={columnOrder}
      onChange={(tableData) => console.log(tableData)}
      theme="light"
      readonly={false}
    />
  );
};
```

### 2. 自定义插件

```tsx
import Table, { CellPlugin } from "@/components/Table";

// 自定义插件
const CustomPlugin: CellPlugin<any> = {
  type: "custom",
  name: "自定义",
  editable: true,
  Renderer: ({ value }) => <div>{value}</div>,
  Editor: ({ value, onCellValueChange, onFinishEdit }) => (
    <input
      value={value}
      onChange={(e) => onCellValueChange(e.target.value)}
      onBlur={onFinishEdit}
    />
  ),
  Icon: () => <span>🎨</span>,
};

const MyTable = () => {
  return (
    <Table
      columns={columns}
      data={data}
      columnOrder={columnOrder}
      plugins={[CustomPlugin]} // 注册自定义插件
    />
  );
};
```

## 注意事项

1. **性能优化**：大量数据时注意虚拟化配置和组件优化
2. **内存管理**：插件开发时注意资源清理，避免内存泄漏
3. **类型安全**：严格使用 TypeScript，避免 any 类型
4. **主题兼容**：确保所有自定义插件支持主题切换
5. **数据一致性**：确保 beforeSave 和 afterLoad 的数据转换一致性

## 扩展开发

### 1. 新增插件类型

- 创建插件目录和文件
- 实现 Renderer 和 Editor 组件
- 定义类型和配置
- 注册到插件系统

### 2. 扩展表格功能

- 修改 TableStore 添加新状态
- 更新组件逻辑
- 添加相应的 Hook

### 3. 主题定制

- 修改 CSS 变量
- 更新主题配置
- 确保所有组件支持

---

**注意：若有相关更新，请更新此文档**
