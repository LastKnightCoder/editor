---
alwaysApply: false
---

# Database 组件技术文档

## 概述

Database 组件是一个基于 React 与 Zustand 的高性能数据表解决方案，具备多视图切换、表格分组、插件化单元格、键盘导航、拖拽排序、主题切换等能力。核心由主渲染层 `Database` 与 Electron 端数据表服务协作完成，通过 `data-table` 与 `data-table-view` 模块实现表与视图的落库、同步与迁移。

## 目录结构

```
Database/
├── Database.tsx                # 顶层组件，注入上下文、插件、视图切换
├── DatabaseContext.tsx         # 表实例上下文
├── DatabaseStore.ts            # Zustand store，列/行/视图状态集中管理
├── PluginManager.ts            # 单元格插件生命周期与转换器
├── index.ts                    # 对外导出
├── hooks/                      # 表相关 Hooks
│   ├── useCellEditor.ts
│   ├── useColumnResize.ts
│   ├── useColumnVisibility.ts
│   ├── useKeyboardNavigation.ts
│   ├── useDatabaseStore.ts
│   └── ...
├── views/
│   ├── TableView/              # 表视图实现
│   │   ├── index.tsx           # 渲染表格、分组、虚拟列表
│   │   ├── components/
│   │   │   ├── ColumnHeader.tsx
│   │   │   ├── ColumnEditModal.tsx
│   │   │   ├── Row.tsx
│   │   │   ├── Cell.tsx
│   │   │   ├── SelectEditor.tsx 等
│   │   └── GroupPanel.tsx      # 分组字段选择面板
│   └── ... 其他视图类型扩展位
├── plugins/                    # 单元格插件仓库
│   ├── TextPlugin/
│   ├── NumberPlugin/
│   ├── SelectPlugin/
│   ├── MultiSelectPlugin/
│   ├── StarPlugin/
│   └── ...
├── constants/
│   └── index.ts
└── types.ts                    # DatabaseView、TableViewConfig 等类型定义
```

## 后端模块

Electron 端配套的 SQLite 表维护在 `src-electron/main/modules/tables`：

- `data-table.ts`：负责数据表主体，存储列、行及当前激活视图。
- `data-table-view.ts`：负责多视图列表，记录视图配置 `DataTableViewConfig`（列序、行序、筛选、排序、分组）。

核心方法：

- `DataTableTable.getDetail(tableId)` 返回表和所有视图组合。
- `DataTableViewTable.normalizeConfig` 确保视图配置补齐列/行/分组结构。
- `DataTableTable.update` 会触发 `DataTableViewTable.syncViewsWithTable`，在列、行变化时同步所有视图的列序/行序。

## 前端架构

### 插件架构

单元格行为通过插件解耦：

```ts
interface CellPlugin<T> {
  type: string;
  name: string;
  Icon?: React.ComponentType;
  Renderer: React.ComponentType<CellRendererProps>;
  Editor?: React.ComponentType<CellEditorProps>;
  editable?: boolean;
  beforeSave?: (value: CellValue, config: T) => CellValue;
  afterLoad?: (value: CellValue, config: T) => CellValue;
  onColumnCleanup?: (columnData: CellValue[]) => Promise<void> | void;
}
```

`PluginManager` 提供注册、查找、保存前/加载后转换、列清理等方法；`Database` 初始化时会注册内置插件并合并外部插件。

### 状态管理

`DatabaseStore.ts` 基于 Zustand 构建：

- `columns`、`rows`、`viewConfig`、`views`、`activeViewId` 等核心数据。
- `columnWidths`、`selectedCell`、`editingCell` 等交互状态。
- 行/列移动、列宽调整、单元格更新、历史快照（撤销/重做）等操作函数。
- `setGroupBy`、`setViewConfig` 支持视图分组、列序、行序同步。

### Database 组件

职责：

1. 创建 `PluginManager`、`DatabaseStore` 并通过 Context 提供给子组件。
2. 监听 store 变化，调用外部回调同步数据、视图配置。
3. 支持 `views` 切换：`ViewTabs` 显示所有视图标签，允许拖拽排序、重命名、删除、新建。
4. 处理键盘导航：方向键移动选区 Enter 启动编辑。

### ViewTabs

- 显示所有视图标签；`react-dnd` 实现拖拽排序。
- 双击标签使用 `EditText` 进入重命名模式。
- “新视图”按钮会使用当前视图为模板创建新视图。
- 右侧 “分组” 按钮打开 `GroupPanel`，选择字段后存储到当前视图 `groupBy` 中。

### TableView

- 使用 `@tanstack/react-virtual` 渲染行虚拟列表。
- 支持 `groupBy`：视图根据字段分组，列表中插入分组头部，组内行继续虚拟化呈现。
- 支持 `Ctrl + 滚轮` 横向滚动，列宽拖拽调整，行拖拽排序。
- 底部 `+ 添加行` 区域固定在表体底部。
- `GroupPanel` 选择字段时提供确认/取消按钮，只有确认后方才更新 `groupBy`。

## 视图配置 (`TableViewConfig`)

```ts
interface TableViewConfig {
  columnOrder: string[];
  rowOrder: string[];
  filters: FilterRule[];
  sorts: SortRule[];
  groupBy?: GroupRule | null; // { fieldId, strategy }
}
```

- `GroupRule.strategy` 支持 `text`、`select`、`multiSelect`、`checkbox`、`star`。
- 多选分组时会将 option 按名称排序后合并。

## Electron 数据流

1. 前端调用 `createDataTableView`、`updateDataTableView`、`deleteDataTableView` 等命令。
2. `data-table-view.ts` 处理 SQL，`normalizeConfig` 保证 `groupBy` 等字段存在。
3. `data-table.ts.update` 更新表数据后，同步各视图列序、行序，保持视图一致。
4. `getDataTableDetail` 提供表与视图合集给前端初始化。

## 主要 Hooks

- `useEditDatabase(tableId)`：从 Electron 获取表与视图，提供 `onDataChange`、`onViewConfigChange`、`onCreateView`、`onDeleteView`、`onRenameView`、`onReorderViews`、`onActiveViewIdChange` 等封装，保持前端状态与后端同步。
- `useColumnResize`、`useColumnVisibility`、`useKeyboardNavigation`：辅助列宽拖拽、列显示、键盘导航。

## 插件体系

插件目录保留与 Table 时代一致的结构。常用插件：

- `TextPlugin`：基础文本输入。
- `SelectPlugin` / `MultiSelectPlugin`：单选、多选，支持配置选项列表。
- `CheckboxPlugin`：布尔类型，分组时按“已勾选/未勾选”归类。
- `StarPlugin`：评分组件，列配置可定义最大分值与步长。
- `AttachmentPlugin`、`ImagePlugin` 等多媒体插件。

每个插件负责渲染与编辑，对外暴露 `beforeSave`/`afterLoad` 以做数据转换。

### 插件使用示例

基础使用：

```tsx
import Database, { ColumnDef, RowData } from "@/components/Database";
import { plugins } from "@/components/Database";

const columns: ColumnDef[] = [
  { id: "name", title: "名称", type: "text", width: 220 },
  { id: "status", title: "状态", type: "select", config: { options: [...] } },
  { id: "rating", title: "评分", type: "star", config: { max: 5, step: 1 } },
];

const rows: RowData[] = [
  { id: "1", name: "任务 A", status: "doing", rating: 4 },
  { id: "2", name: "任务 B", status: "todo", rating: 5 },
];

<Database
  columns={columns}
  data={rows}
  views={preparedViews}
  activeViewId={activeViewId}
  viewConfig={activeView.config}
  plugins={[plugins.TextPlugin, plugins.SelectPlugin, plugins.StarPlugin]}
/>;
```

自定义插件：

```tsx
import { CellPlugin } from "@/components/Database";

const CustomTagPlugin: CellPlugin<{ color?: string }> = {
  type: "custom-tag",
  name: "标签",
  editable: true,
  Renderer: ({ value }) => <span className="px-2 py-1 rounded bg-blue-100">{value}</span>,
  Editor: ({ value, onCellValueChange, onFinishEdit }) => (
    <input
      className="w-full h-full px-2"
      value={String(value ?? "")}
      onChange={(event) => onCellValueChange(event.target.value)}
      onBlur={onFinishEdit}
      autoFocus
    />
  ),
  beforeSave: (value, config) => String(value ?? ""),
  afterLoad: (value) => String(value ?? ""),
};

<Database
  columns={[{ id: "tag", title: "标签", type: "custom-tag" }]}
  data={[{ id: "row-1", tag: "自定义" }]}
  views={preparedViews}
  activeViewId={activeViewId}
  viewConfig={activeView.config}
  plugins={[CustomTagPlugin]}
/>;
```

## 交互能力

- **行/列拖拽排序**：`Row.tsx` 与 `ColumnHeader.tsx` 使用 `react-dnd`。
- **单元格编辑**：按下 Enter 或双击进入，失焦或回车提交，Escape 退出。
- **虚拟滚动**：大数据集下保持流畅；按住 `Ctrl` + 滚轮横向滚动。
- **多视图管理**：每张表可持久化多个视图，视图名称、顺序、配置独立维护。
- **分组视图**：视图可按字段分组，支持文本、单选、多选、复选、评分。

## API 概述

### 组件 Props

```ts
interface DatabaseProps {
  columns: ColumnDef[];
  data: RowData[];
  views: DataTableView[];
  activeViewId: number;
  viewConfig: TableViewConfig;
  onActiveViewIdChange?: (viewId: number | null) => Promise<void>;
  onDataChange?: (data: { columns: ColumnDef[]; rows: RowData[] }) => void;
  onViewConfigChange?: (config: TableViewConfig) => void;
  onCreateView?: (view: CreateDataTableView) => Promise<DataTableView | null>;
  onDeleteView?: (viewId: number) => Promise<number | null>;
  onRenameView?: (viewId: number, name: string) => Promise<DataTableView | null>;
  onReorderViews?: (orderedIds: number[]) => Promise<void>;
  plugins?: CellPlugin<unknown>[];
  theme?: "light" | "dark";
  readonly?: boolean;
  className?: string;
}
```

### Electron 命令

- `data-table:create/update/get-detail/set-active-view/delete`。
- `data-table-view:create/update/delete/reorder/list-by-table`。

## 说明

- 新建视图默认复制当前视图配置，顺序递增。
- 删除视图时保持至少一张视图存在，自动切换至第一张视图。
- 分组面板只在确认时写入 `groupBy`，取消或关闭不会改变配置。
- 表渲染层不再单独导出 Table 组件，所有能力通过 `Database` 暴露。
