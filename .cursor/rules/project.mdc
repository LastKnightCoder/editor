---
description: 
globs: 
alwaysApply: true
---

# 项目规范

## 代码规范

- 包管理器使用 pnpm，因为是 electron 项目，尽量使用 -D 下载包
- 数据管理使用 zustand，不可变数据流使用 immer
- electron 数据存储使用 sqlite
- 所有的类型声明在 src/types 文件夹
- 所有和 Electron 的交互都在 src/commands 下，调用 command 和 Electron 交互
- 编辑器的代码在 src/components/Editor 下，Editor 是一个非受控组件，当切换时（如卡片 id 发生变化），需要通过 ref.current.setEditorValue 设置内容
- 项目的图标库使用的是 react-icons
- 在移动和重构时，记得一定删除之前被移动或不需要的内容，比如引用，样式，文件夹，文件等等
- 类型不使用 any
- 当文件太长时，你需要考虑拆分组件和 hook
- 非必须不使用 :global 样式
- 组件使用 memo 进行性能优化时，不要在最后通过 export default memo(Component) 的方式导出，而是通过 const Component = memo(() => {}) 这样，因为前一种方式对 react-refresh 不友好
- 使用 classnames 库处理多类名

## 数据库

- src-electron/main/modules/table 中放了所有的表
- 所有的表都是提供的都是静态方法，第一个参数必须是 db: Database.Databse
- 所有的表格需要在 [database.ts](mdc:src-electron/main/modules/database.ts) 中注册
- 表必须提供三个静态方法
  - initTable 创建表
  - upgradeTable 有新的字段变化，或者数据迁移时在此升级表
  - getListenEvents 为前端提供的 command，键名为 commnd 名称，值为对应的处理方法，为保证 this 指向正确，建议 bind(this)

## Other

- ALWAYS begin your response by telling me what AI model you are using. Just say the name of the model like (claude-3.5-sonnet, claude-4.0-sonnet, gemini-2.5-pro, etc.)
- Do Not Build Project, like pnpm run build, is not encouraged
- prefer export multiple utils, types files in a file, like index.ts, and just import this file
