---
description: 
globs: 
alwaysApply: true
---
---
description: 项目信息
globs: 
alwaysApply: true
---

## 代码规范

- 包管理器使用 pnpm，因为是 electron 项目，尽量使用 -D 下载包
- 使用中文注释，只在关键节点注释，非重要逻辑不注释
- 数据管理使用 zustand，不可变数据流使用 immer
- electron 数据存储使用 sqlite
- 所有的类型声明在 src/types 文件夹
- 所有和 Electron 的交互都在 src/commands 下，调用 command 和 Electron 交互
- 编辑器的代码在 src/components/Editor 下，Editor 是一个非受控组件，当切换时（如卡片 id 发生变化），需要通过 ref.current.setEditorValue 设置内容
- 组件创建规则，创建一个文件夹，名称和组件名相同，里面有一个 index.tsx 和 index.module.less
- 项目的图标库使用的是 react-icons
- 在移动和重构时，记得一定删除之前被移动或不需要的内容，比如引用，样式，文件夹，文件等等
- 类型尽可能不使用 any
- 所有的组件都需要考虑深色和浅色两种样式，一般通过 CSS 变量控制，在 src/themes 下存在两个样式文件，light.less 和 dark.less，其中定义了浅色和深色的 CSS 变量，如果是全局 CSS 变量就定义在这里，否则定义在组件里面就可以了，antd 的组件不需要，因为统一处理了，在使用 CSS 变量之前需确保该 CSS 变量存在，不要使用不存在的 CSS 变量，如果需要，可以根据浅色和深色环境自行定义，一般使用 [useTheme.ts](mdc:src/hooks/useTheme.ts) 获得当前主题，在容器上添加一个 dark 类，在该类下定义深色模式的 CSS 变量
- 当文件太长时，你需要考虑拆分组件和 hook
- 非必须不使用 :global 样式
- 组件使用 memo 进行性能优化时，不要在最后通过 export default memo(Component) 的方式导出，而是通过 const Component = memo(() => {}) 这样，因为前一种方式对 react-refresh 不友好

## 数据库

- src-electron/main/modules/table 中放了所有的表
- 所有的表都是提供的都是静态方法，第一个参数必须是 db: Database.Databse
- 所有的表格需要在 [database.ts](mdc:src-electron/main/modules/database.ts) 中注册
- 表必须提供三个静态方法
  - initTable 创建表
  - upgradeTable 有新的字段变化，或者数据迁移时在此升级表
  - getListenEvents 为前端提供的 command，键名为 commnd 名称，值为对应的处理方法，为保证 this 指向正确，建议 bind(this) 
